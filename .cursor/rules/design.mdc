---
description: 
globs: 
alwaysApply: true
---
# Design

## 설계 원칙

### 1. Component-Driven Development (CDD)
- **독립성**: 각 UI 컴포넌트는 독립적으로 개발, 테스트, 재사용이 가능해야 합니다.
- **일관성**: Storybook과 같은 도구를 사용하여 컴포넌트 라이브러리를 구축하고 디자인 시스템의 일관성을 유지합니다.
- **조립성**: 작은 단위(Atoms)의 컴포넌트를 조립하여 더 큰 컴포넌트(Molecules, Organisms)와 페이지를 구성합니다.

### 2. Responsive Design
- **모바일 우선**: 모바일 뷰포트를 기준으로 디자인하고, 점진적으로 태블릿, 데스크탑으로 확장합니다.
- **유동적 그리드**: 화면 크기에 따라 유연하게 변하는 그리드 시스템을 사용하여 레이아웃을 구성합니다.

### 3. Infrastructure as Code (IaC)
- **GitOps**: Kubernetes 매니페스트, Dockerfile, CI/CD 파이프라인 등 모든 인프라 관련 코드는 Git을 통해 버전 관리됩니다.
- **선언적 접근**: '어떻게'가 아닌 '무엇을' 정의하여 시스템 상태의 예측 가능성과 일관성을 보장합니다.

## UI/UX 설계

### 페이지 구성
- **`/dashboard`**:
    - **상단**: 전체 시스템 상태 및 최신 평가 결과 요약 (KPI 카드).
    - **중단**: 주요 메트릭(정확도, Hallucination 등)의 시계열 트렌드 차트.
    - **하단**: 전체 평가 실행 목록을 보여주는 데이터 테이블 (필터링, 정렬 기능 포함).
- **`/runs/:run_id`**:
    - 특정 평가 실행에 대한 모든 상세 정보.
    - Deepeval과 Evalchemy의 모든 메트릭을 그룹화하여 표시.
    - 이전 실행 결과와 비교하는 기능.

### 컴포넌트 계층 구조 (예시)
```
- App
  - Layout
    - Header
    - Sidebar
    - Content
      - DashboardPage
        - KpiCard
        - TrendChart
        - RunsDataTable
      - DetailPage
        - RunSummary
        - MetricsGroup
          - MetricView
```

### API 데이터 모델 (프론트엔드)
- **Run 목록 (`/api/runs`)**:
  ```json
  [
    {
      "run_id": "uuid-1",
      "model_tag": "release-0.3.1",
      "timestamp": "2024-01-01T00:00:00Z",
      "overall_score": 0.85,
      "status": "success"
    }
  ]
  ```
- **Run 상세 (`/api/runs/:run_id`)**: `design.mdc`의 기존 결과 데이터 모델과 유사하나, UI 표시에 맞게 가공될 수 있습니다.

## CI/CD 파이프라인 설계
- **Trigger**: `main` 또는 `develop` 브랜치에 `push` 또는 `pull_request`.
- **Jobs**:
    1. **Lint & Test**:
        - `npm install`
        - `npm run lint`
        - `npm run test`
    2. **Build & Push Image**:
        - `docker build` (Multi-stage)
        - `docker push` to GHCR
    3. **Scan Image**:
        - `trivy scan`
    4. **(CD) Deploy**: (선택적) ArgoCD/Flux 또는 수동 `kubectl` 실행

## Kubernetes 객체 설계
- **Deployment**:
    - **Replicas**: 2 이상 (HA 구성)
    - **Strategy**: RollingUpdate (무중단 배포)
    - **Probes**: `livenessProbe` 및 `readinessProbe` 설정하여 자동 복구 및 트래픽 제어
- **Service**:
    - **Type**: ClusterIP
    - 내부적으로 Deployment의 Pod들을 연결
- **Ingress**:
    - 외부 트래픽을 Service로 라우팅
    - TLS 인증서 적용
- **ConfigMap**:
    - `nginx.conf` 또는 API 엔드포인트와 같은 비-민감성 설정 관리
- **Secret**:
    - 외부 API 키 등 민감 정보 관리
